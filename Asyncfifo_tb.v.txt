`timescale 1ns / 1ps

module top_tb;

    // Inputs
    reg wr_clk;
    reg rd_clk;
    reg rst;
    reg wr_en;
    reg rd_en;
    reg [7:0] write_data;

    // Outputs
    wire [7:0] read_data;
    wire empty;
    wire full;

    // Instantiate the Unit Under Test (UUT)
    top uut (
        .wr_clk(wr_clk), 
        .rd_clk(rd_clk), 
        .rst(rst), 
        .wr_en(wr_en), 
        .rd_en(rd_en), 
        .write_data(write_data), 
        .read_data(read_data), 
        .empty(empty), 
        .full(full)
    );

    // Clock generation for write and read clocks
    initial begin
        wr_clk = 0;
        forever #5 wr_clk = ~wr_clk; // 100 MHz clock
    end

    initial begin
        rd_clk = 0;
        forever #10 rd_clk = ~rd_clk; // 50 MHz clock
    end

    // Test stimulus
    initial begin
        // Initialize Inputs
        rst = 1;
        wr_en = 0;
        rd_en = 0;
        write_data = 8'b00000000;

        // Wait for global reset to finish
        #20;
        
        // Release reset
        rst = 0;
        #20;

        // Write data into FIFO
        write_data = 8'hAA;
        wr_en = 1;
        #10; // Write first data
        wr_en = 0;
        #10; 

        write_data = 8'hBB;
        wr_en = 1;
        #10; // Write second data
        wr_en = 0;
        #10; 

        write_data = 8'hCC;
        wr_en = 1;
        #10; // Write third data
        wr_en = 0;
        #10; 

        // Read data from FIFO
        rd_en = 1;
        #20; // Read first data
        rd_en = 0;
        #10; 

        rd_en = 1;
        #20; // Read second data
        rd_en = 0;
        #10; 

        // Write until full
        repeat(8) begin
            write_data = $random;
            wr_en = 1;
            #10;
            wr_en = 0;
            #10;
        end

        // Check full flag
        if (full) begin
            $display("FIFO is full as expected");
        end else begin
            $display("ERROR: FIFO is not full when it should be");
        end

        // Read until empty
        repeat(8) begin
            rd_en = 1;
            #20;
            rd_en = 0;
            #10;
        end

        // Check empty flag
        if (empty) begin
            $display("FIFO is empty as expected");
        end else begin
            $display("ERROR: FIFO is not empty when it should be");
        end

        // End simulation
        #100;
        $finish;
    end
      
endmodule
